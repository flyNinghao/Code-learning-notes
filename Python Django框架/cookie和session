1. Cookie和session（cookie是客户端本地存储的键值对，session是服务端存储的键值对）
  -cookie的工作原理是：由服务器产生内容，浏览器收到请求后保存在本地；当浏览器再次访问时，浏览器会自动带上cookie，这样服务器就能通过cookie的内容来判断这个是“谁”了。
  -cookie虽然在一定程度上解决了“保持状态”的需求，但是由于cookie本身最大支持4096字节，以及cookie本身保存在客户端，可能被拦截或窃取，因此就需要有一种新的东西，
   它能支持更多的字节，并且他保存在服务器，有较高的安全性。这就是session。
  -每当我们使用一款浏览器访问一个登陆页面的时候，一旦我们通过了认证。服务器端就会发送一组随机唯一的字符串（假设是123abc）到浏览器端，这个被存储在浏览端的东西就叫cookie。
   而服务器端也会自己存储一下用户当前的状态，比如login=true，username=hahaha之类的用户信息。但是这种存储是以字典形式存储的，字典的唯一key就是刚才发给用户的唯一的cookie值。
   那么如果在服务器端查看session信息的话，理论上就会看到如下样子的字典：{'123abc':{'login':true,'username:hahaha'}}；
   因为每个cookie都是唯一的，所以我们在电脑上换个浏览器再登陆同一个网站也需要再次验证。那么为什么说我们只是理论上看到这样子的字典呢？因为处于安全性的考虑，
   其实对于上面那个大字典不光key值123abc是被加密的，value值{'login':true,'username:hahaha'}在服务器端也是一样被加密的。所以我们服务器上就算打开session信息看到的也是类似与以下样子的东西
   {'123abc':dasdasdasd1231231da1231231}
   
    from django.shortcuts import render
    from django.shortcuts import redirect
    def login(request):
        if request.method=="POST":
            username=request.POST['username']
            pwd=request.POST['passwd']
            if username=='abc' and pwd=='123':
                #设置session内部的字典内容
                request.session['is_login']='true'
                request.session['username']='abc'
                #登录成功就将url重定向到后台的url
                return redirect('/backend/')
        #登录不成功或第一访问就停留在登录页面
        return render(request,'login.html')
    def backend(request):
        """
        这里必须用读取字典的get()方法把is_login的value缺省设置为False，
        当用户访问backend这个url先尝试获取这个浏览器对应的session中的
        is_login的值。如果对方登录成功的话，在login里就已经把is_login
        的值修改为了True,反之这个值就是False的
        """
        is_login=request.session.get('is_login',False)
        #如果为真，就说明用户是正常登陆的
        if is_login:
            #获取字典的内容并传入页面文件
            cookie_content=request.COOKIES
            session_content=request.session
            username=request.session['username']
            return render(request,'backend.html',
                          {
                'cookie_content':cookie_content,
                'session_content':session_content,
                'username':username
                          })
        else:
            """
            如果访问的时候没有携带正确的session，
            就直接被重定向url回login页面
            """
            return redirect('/login/')
    def logout(request):
        """
        直接通过request.session['is_login']回去返回的时候，
        如果is_login对应的value值不存在会导致程序异常。所以
        需要做异常处理
        """
        try:
            #删除is_login对应的value值
            del request.session['is_login']
        except KeyError:
            pass
        #点击注销之后，直接重定向回登录页面
        return redirect('/login/')
        
  -操作Cookie
    -获取cookie：request.COOKIES[key]
    -设置cookie：response.set_cookie(key,value)
    -由于cookie保存在客户端的电脑上，所以，jquery也可以操作cookie。
      <script src='http://830909.blog.51cto.com/static/js/jquery.cookie.js'></script>
      $.cookie("list_pager_num", 30,{ path: '/' });
  -操作Session(session默认在服务器端保存15天)
　　 -获取session：request.session[key]
　　 -设置session：reqeust.session[key] = value
　　 -删除session：del request.session[key]    
     （这个删除其实就是把数据库的session_data更新为一个其他的值了，并没有立即删除）
     -request.session.set_expiry(value)
     * 如果value是个整数，session会在些秒数后失效。
     * 如果value是个datatime或timedelta，session就会在这个时间后失效。
     * 如果value是0,用户关闭浏览器session就会失效。
     * 如果value是None,session会依赖全局session失效策略。
