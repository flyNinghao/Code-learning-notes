Form组件是用于处理前端页面Form表单传入的数据，并对其进行验证，同时具有生成html代码的功能。
实现：由后端创建相关Form类，在类中定义各个需要验证的字段，字段的属性即是各种验证条件。在相关方法中创建该类的实例，得到实例对象，就可以将实例对象传入前端，通过"."来获取响应的数据


1，From组件
  -验证用户数据（显示错误信息）
  -生成HTML代码
  -初始化页面内容
  -HTML Form提交保留上次提交的数据
  
  -创建Form类
    from django import forms
    from django.forms import fileds
    from django.forms import widgets
    class MyForm(Form):
        user = fields.CharField(
            widget=widgets.TextInput(attrs={'id': 'i1', 'class': 'c1'})
        )

        gender = fields.ChoiceField(
            choices=((1, '男'), (2, '女'),),
            initial=2,
            widget=widgets.RadioSelect
        )

        city = fields.CharField(
            initial=2,
            widget=widgets.Select(choices=((1,'上海'),(2,'北京'),))
        )

        pwd = fields.CharField(
            widget=widgets.PasswordInput(attrs={'class': 'c1'}, render_value=True)
        )
  
  -view函数处理
    from django.shortcuts import render, redirect
    from .forms import MyForm


    def index(request):
        if request.method == "GET":
            obj = MyForm()
            return render(request, 'index.html', {'form': obj})
        elif request.method == "POST":
            obj = MyForm(request.POST, request.FILES)
            if obj.is_valid():
                values = obj.clean()
                print(values)
            else:
                errors = obj.errors
                print(errors)
            return render(request, 'index.html', {'form': obj})
        else:
            return redirect('http://www.google.com')

  -前端生成
    <form action="/" method="POST" enctype="multipart/form-data">
      <p>{{ form.user }} {{ form.user.errors }}</p>
      <p>{{ form.gender }} {{ form.gender.errors }}</p>
      <p>{{ form.city }} {{ form.city.errors }}</p>
      <p>{{ form.pwd }} {{ form.pwd.errors }}</p>
      <input type="submit"/>
    </form>
    
2，Form类创建主要涉及字段和插件
  -字段（即验证数据的内容）
    -Field
      required=True,               是否允许为空
      widget=None,                 HTML插件
      label=None,                  用于生成Label标签或显示内容
      initial=None,                初始值
      help_text='',                帮助信息(在标签旁边显示)
      error_messages=None,         错误信息 {'required': '不能为空', 'invalid': '格式错误'}
      show_hidden_initial=False,   是否在当前插件后面再加一个隐藏的且具有默认值的插件（可用于检验两次输入是否一直）
      validators=[],               自定义验证规则
      localize=False,              是否支持本地化
      disabled=False,              是否可以编辑
      label_suffix=None            Label内容后缀

    -CharField(Field)
      max_length=None,             最大长度
      min_length=None,             最小长度
      strip=True                   是否移除用户输入空白
 
    -IntegerField(Field)
      max_value=None,              最大值
      min_value=None,              最小值
 
    -FloatField(IntegerField)
        ...
 
    -DecimalField(IntegerField)
      max_value=None,              最大值
      min_value=None,              最小值
      max_digits=None,             总长度
      decimal_places=None,         小数位长度
 
    -BaseTemporalField(Field)
      input_formats=None          时间格式化   

    -DateField(BaseTemporalField)    格式：2015-09-01
    -TimeField(BaseTemporalField)    格式：11:12
    -DateTimeField(BaseTemporalField)格式：2015-09-01 11:12
 
    -DurationField(Field)            时间间隔：%d %H:%M:%S.%f
      ...
 
    -RegexField(CharField)
      regex,                      自定制正则表达式
      max_length=None,            最大长度
      min_length=None,            最小长度
      error_message=None,         忽略，错误信息使用 error_messages={'invalid': '...'}
 
    -EmailField(CharField)      
      ...

    -FileField(Field)
      allow_empty_file=False     是否允许空文件
 
    -ImageField(FileField)      
        ...
        注：需要PIL模块，pip3 install Pillow
        以上两个字典使用时，需要注意两点：
            - form表单中 enctype="multipart/form-data"
            - view函数中 obj = MyForm(request.POST, request.FILES)
 
    -URLField(Field)
      ...
 
 
    -BooleanField(Field)  
      ...
 
    -NullBooleanField(BooleanField)
      ...
 
    -ChoiceField(Field)
      ...
      choices=(),                选项，如：choices = ((0,'上海'),(1,'北京'),)
      required=True,             是否必填
      widget=None,               插件，默认select插件
      label=None,                Label内容
      initial=None,              初始值
      help_text='',              帮助提示
 
 
    -ModelChoiceField(ChoiceField)
      ...                        django.forms.models.ModelChoiceField
      queryset,                  # 查询数据库中的数据
      empty_label="---------",   # 默认空显示内容
      to_field_name=None,        # HTML中value的值对应的字段
      limit_choices_to=None      # ModelForm中对queryset二次筛选
     
    -ModelMultipleChoiceField(ModelChoiceField)
      ...django.forms.models.ModelMultipleChoiceField
 
 
     
    -TypedChoiceField(ChoiceField)
      coerce = lambda val: val   对选中的值进行一次转换
      empty_value= ''            空值的默认值

    -MultipleChoiceField(ChoiceField)
      ...
 
    -TypedMultipleChoiceField(MultipleChoiceField)
      coerce = lambda val: val   对选中的每一个值进行一次转换
      empty_value= ''            空值的默认值
 
    -ComboField(Field)
      fields=()                  使用多个验证，如下：即验证最大长度20，又验证邮箱格式
        fields.ComboField(fields=[fields.CharField(max_length=20), fields.EmailField(),])
 
    -MultiValueField(Field)
      PS: 抽象类，子类中可以实现聚合多个字典去匹配一个值，要配合MultiWidget使用
 
    -SplitDateTimeField(MultiValueField)
      input_date_formats=None,   格式列表：['%Y--%m--%d', '%m%d/%Y', '%m/%d/%y']
      input_time_formats=None    格式列表：['%H:%M:%S', '%H:%M:%S.%f', '%H:%M']
 
    -FilePathField(ChoiceField)     文件选项，目录下文件显示在页面中
      path,                      文件夹路径
      match=None,                正则匹配
      recursive=False,           递归下面的文件夹
      allow_files=True,          允许文件
      allow_folders=False,       允许文件夹
      required=True,
      widget=None,
      label=None,
      initial=None,
      help_text=''
 
    -GenericIPAddressField
      protocol='both',           both,ipv4,ipv6支持的IP格式
      unpack_ipv4=False          解析ipv4地址，如果是::ffff:192.0.2.1时候，可解析为192.0.2.1， PS：protocol必须为both才能启用
 
    -SlugField(CharField)           数字，字母，下划线，减号（连字符）
      ...
 
    -UUIDField(CharField)           uuid类型
      ...
  
  -插件（在前端展示的方式）
    TextInput(Input)
    NumberInput(TextInput)
    EmailInput(TextInput)
    URLInput(TextInput)
    PasswordInput(TextInput)
    HiddenInput(TextInput)
    Textarea(Widget)
    DateInput(DateTimeBaseInput)
    DateTimeInput(DateTimeBaseInput)
    TimeInput(DateTimeBaseInput)
    CheckboxInput
    Select
    NullBooleanSelect
    SelectMultiple
    RadioSelect
    CheckboxSelectMultiple
    FileInput
    ClearableFileInput
    MultipleHiddenInput
    SplitDateTimeWidget
    SplitHiddenDateTimeWidget
    SelectDateWidget
  
    -常用选择插件：
      # 单radio，值为字符串
      # user = fields.CharField(
      #     initial=2,
      #     widget=widgets.RadioSelect(choices=((1,'上海'),(2,'北京'),))
      # )

      # 单radio，值为字符串
      # user = fields.ChoiceField(
      #     choices=((1, '上海'), (2, '北京'),),
      #     initial=2,
      #     widget=widgets.RadioSelect
      # )

      # 单select，值为字符串
      # user = fields.CharField(
      #     initial=2,
      #     widget=widgets.Select(choices=((1,'上海'),(2,'北京'),))
      # )

      # 单select，值为字符串
      # user = fields.ChoiceField(
      #     choices=((1, '上海'), (2, '北京'),),
      #     initial=2,
      #     widget=widgets.Select
      # )

      # 多选select，值为列表
      # user = fields.MultipleChoiceField(
      #     choices=((1,'上海'),(2,'北京'),),
      #     initial=[1,],
      #     widget=widgets.SelectMultiple
      # )


      # 单checkbox
      # user = fields.CharField(
      #     widget=widgets.CheckboxInput()
      # )


      # 多选checkbox,值为列表
      # user = fields.MultipleChoiceField(
      #     initial=[2, ],
      #     choices=((1, '上海'), (2, '北京'),),
      #     widget=widgets.CheckboxSelectMultiple
      # )
       choices可以从数据库中动态获取，但是由于验证数据都是Form类的静态属性，无法实时更新，因此需要自定义构造方法：
       class MyForm(Form):

        user = fields.ChoiceField(
            # choices=((1, '上海'), (2, '北京'),),
            initial=2,
            widget=widgets.Select
        )

        def __init__(self, *args, **kwargs):
            super(MyForm,self).__init__(*args, **kwargs)
            # self.fields['user'].widget.choices = ((1, '上海'), (2, '北京'),)
            # 或
            self.fields['user'].widget.choices = models.Classes.objects.all().value_list('id','caption')
  
  3，自定义验证规则
    -方式一：
      from django.forms import Form
      from django.forms import widgets
      from django.forms import fields
      from django.core.validators import RegexValidator

      class MyForm(Form):

          user = fields.ChoiceField(
              # choices=((1, '上海'), (2, '北京'),),
              initial=2,
              widget=widgets.Select
          )

          def __init__(self, *args, **kwargs):
              super(MyForm,self).__init__(*args, **kwargs)
              # self.fields['user'].widget.choices = ((1, '上海'), (2, '北京'),)
              # 或
              self.fields['user'].widget.choices = models.Classes.objects.all().value_list('id','caption')
    
    -方式二：
      import re
      from django.forms import Form
      from django.forms import widgets
      from django.forms import fields
      from django.core.exceptions import ValidationError
      # 自定义验证规则
      def mobile_validate(value):
          mobile_re = re.compile(r'^(13[0-9]|15[012356789]|17[678]|18[0-9]|14[57])[0-9]{8}$')
          if not mobile_re.match(value):
              raise ValidationError('手机号码格式错误')
      class PublishForm(Form):
          # 使用自定义验证规则
          phone = fields.CharField(validators=[mobile_validate, ],
                                  error_messages={'required': '手机不能为空'},
                                  widget=widgets.TextInput(attrs={'class': "form-control",
                                                                'placeholder': u'手机号码'}))
    
    -方式三
      from django import forms
      from django.forms import fields
      from django.forms import widgets
      from django.core.exceptions import ValidationError
      from django.core.validators import RegexValidator

      class FInfo(forms.Form):
          username = fields.CharField(max_length=5,
                                      validators=[RegexValidator(r'^[0-9]+$', 'Enter a valid extension.', 'invalid')], )
          email = fields.EmailField()

          def clean_username(self):
              """
              Form中字段中定义的格式匹配完之后，执行此方法进行验证
              :return:
              """
              value = self.cleaned_data['username']
              if "666" in value:
                  raise ValidationError('666已经被玩烂了...', 'invalid')
              return value

    -方式四：同时生成多个标签进行验证
      from django.forms import Form
      from django.forms import widgets
      from django.forms import fields

      from django.core.validators import RegexValidator


      ############## 自定义字段 ##############
      class PhoneField(fields.MultiValueField):
          def __init__(self, *args, **kwargs):
              # Define one message for all fields.
              error_messages = {
                  'incomplete': 'Enter a country calling code and a phone number.',
              }
              # Or define a different message for each field.
              f = (
                  fields.CharField(
                      error_messages={'incomplete': 'Enter a country calling code.'},
                      validators=[
                          RegexValidator(r'^[0-9]+$', 'Enter a valid country calling code.'),
                      ],
                  ),
                  fields.CharField(
                      error_messages={'incomplete': 'Enter a phone number.'},
                      validators=[RegexValidator(r'^[0-9]+$', 'Enter a valid phone number.')],
                  ),
                  fields.CharField(
                      validators=[RegexValidator(r'^[0-9]+$', 'Enter a valid extension.')],
                      required=False,
                  ),
              )
              super(PhoneField, self).__init__(error_messages=error_messages, fields=f, require_all_fields=False, *args,
                                               **kwargs)

          def compress(self, data_list):
              """
              当用户验证都通过后，该值返回给用户
              :param data_list:
              :return:
              """
              return data_list

      ############## 自定义插件 ##############
      class SplitPhoneWidget(widgets.MultiWidget):
          def __init__(self):
              ws = (
                  widgets.TextInput(),
                  widgets.TextInput(),
                  widgets.TextInput(),
              )
              super(SplitPhoneWidget, self).__init__(ws)

          def decompress(self, value):
              """
              处理初始值，当初始值initial不是列表时，调用该方法
              :param value:
              :return:
              """
              if value:
                  return value.split(',')
              return [None, None, None]
      
